import Head from "next/head";
import { useState, useCallback } from "react";
import { format } from "date-fns";
import { DownloadButton } from "../../../components/button";
import { DownloadModal } from "@/components/modal";

import { Skeleton } from "@mui/material";
import { DatePicker } from "@mui/x-date-pickers";

import { RealTimeCard } from "@/components/cards";
import {
  EnergyDailyChart,
  EnergyMonthlyChart,
  EnergyYearlyChart,
} from "@/components/charts";
import {
  DailyData,
  MonthlyData,
  YearlyData,
  OutdoorSolarData,
} from "@/types/types";

import { useSolarFetch, useOutdoorSolarFetch } from "@/hooks/solar.hooks";

import { realTimeCardItems } from "@/utils";
export default function PanelSuryaAC() {
  const [open, setOpen] = useState(false);

  const openModal = useCallback(() => setOpen(true), []);
  const closeModal = useCallback(() => setOpen(false), []);

  const [dailyDate, setDailyDate] = useState<Date | null>(new Date());
  const [monthlyDate, setMonthlyDate] = useState<Date | null>(new Date());
  const [yearlyDate, setYearlyDate] = useState<Date | null>(new Date());

  const changeDate = {
    daily: useCallback((date: Date | null) => setDailyDate(date), []),
    monthly: useCallback((date: Date | null) => setMonthlyDate(date), []),
    yearly: useCallback((date: Date | null) => setYearlyDate(date), []),
  };

  const [realData, dailyData, monthlyData, yearlyData, outdoorSolarData] =
    useSolarFetch("suryaAC", dailyDate, monthlyDate, yearlyDate);

  const latestOutdoor = useOutdoorSolarFetch();

  // console.log(dailyData.data.length);

  return (
    <>
      <Head>
        <title>Panel Surya</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/Solar-Panel.svg" />
      </Head>

      <div className="pb-8">
        {/* <div className="flex flex-row place-content-between">
          <DownloadButton onClick={openModal} />
          <div className=" bg-white shadow-md rounded">
            <div className=" flex gap-2 place-items-center">
              <p className=" italic ml-2 border-r-2 border-r-[#9747FF] pr-2">
                Last Update
              </p>
              <div className="flex flex-col mr-2">
                <div className="flex gap-1 place-items-center">
                  <p>Panel surya</p>
                  {realData.isSuccess ? (
                    <span className="text-sm">
                      :{" "}
                      {format(
                        new Date(realData.data[4]?.db_created_at),
                        "dd/MM/yyyy HH:mm:ss"
                      )}{" "}
                      WIB
                    </span>
                  ) : (
                    <Skeleton variant="text" width={150} height={20} />
                  )}
                </div>
                <div className="flex gap-1 place-items-center justify-between">
                  <p>Outdoor</p>
                  {latestOutdoor.isSuccess ? (
                    <span className="text-sm">
                      :{" "}
                      {format(
                        new Date(latestOutdoor.data.data.lastUpdate),
                        "dd/MM/yyyy HH:mm:ss"
                      )}{" "}
                      WIB
                    </span>
                  ) : (
                    <Skeleton variant="text" width={150} height={20} />
                  )}
                </div>
              </div>
            </div>
          </div>
        </div> */}
        <DownloadButton onClick={openModal} />
        <DownloadModal
          modalTitle="Panel Surya AC"
          open={open}
          onClose={closeModal}
        />

        <section
          id="realtime"
          className="mt-4 flex flex-col bg-white shadow-md"
        >
          <div className="mx-9 my-10">
            <div className="flex flex-col gap-2">
              <h3 className="text-2xl font-bold">
                Data <span className="text-[#9747FF]">Terbaru</span>
              </h3>
              {realData.isSuccess ? (
                <p className="italic text-sm">
                  Last updated :{" "}
                  {format(
                    new Date(realData.data[4]?.db_created_at),
                    "dd/MM/yyyy HH:mm:ss"
                  )}{" "}
                  WIB
                </p>
              ) : (
                <></>
              )}
              {/* <p className="italic">Last updated : {}</p> */}
            </div>
            <div className="mt-9 flex flex-row gap-6 justify-center">
              {realData.isLoading && (
                <>
                  <Skeleton variant="rectangular" width={208} height={288} />
                  <Skeleton variant="rectangular" width={208} height={288} />
                  <Skeleton variant="rectangular" width={208} height={288} />
                  <Skeleton variant="rectangular" width={208} height={288} />
                  <Skeleton variant="rectangular" width={208} height={288} />
                </>
              )}
              {realData.isError && <p>Error...</p>}
              {realData.isSuccess && (
                <>
                  {realTimeCardItems.map((item, index) => (
                    <RealTimeCard
                      key={index}
                      value={realData.data[4][item.valueKey]}
                      unit={item.unit}
                      title={item.title}
                    />
                  ))}
                </>
              )}
            </div>
          </div>
        </section>

        <section id="harian" className="mt-9 flex flex-col bg-white shadow-md">
          <div className="mx-9 my-10">
            <div className="flex flex-row justify-between">
              <div className="flex flex-col gap-2">
                <h3 className="text-2xl font-bold">
                  Produksi Energi <span className="text-[#9747FF]">Harian</span>
                </h3>
                {/* {dailyData.isSuccess && (
                  <p className="italic text-sm text-[#378ffd]">
                    Last updated :{" "}
                    {format(
                      new Date(
                        dailyData.data[dailyData.data.length - 1].db_created_at
                      ),
                      "dd/MM/yyyy HH:mm:ss"
                    )}{" "}
                    WIB
                  </p>
                )} */}
                {realData.isSuccess && (
                  <p className="italic text-sm text-[#378ffd]">
                    Last updated :{" "}
                    {format(
                      new Date(realData.data[4]?.db_created_at),
                      "dd/MM/yyyy HH:mm:ss"
                    )}{" "}
                    WIB
                  </p>
                )}
                {latestOutdoor.isSuccess && (
                  <p className="italic text-sm text-[#4ee294]">
                    Last updated :{" "}
                    {format(
                      new Date(latestOutdoor.data.data.lastUpdate),
                      "dd/MM/yyyy HH:mm:ss"
                    )}{" "}
                    WIB
                  </p>
                )}
              </div>
              <DatePicker
                label="Masukkan Tanggal"
                value={dailyDate}
                views={["year", "month", "day"]}
                defaultValue={new Date()}
                onChange={changeDate.daily}
                disableFuture
                format="dd/MM/yyyy"
                className="mr-16"
              />
            </div>
            <div className="mt-9 ml-16 mr-2">
              {dailyData.isSuccess && outdoorSolarData.isSuccess ? (
                <EnergyDailyChart
                  data={dailyData.data as DailyData[]}
                  outdoorData={outdoorSolarData.data as OutdoorSolarData[]}
                  dailyDate={dailyDate as Date}
                />
              ) : (
                <Skeleton variant="rectangular" width={1100} height={435} />
              )}
            </div>
          </div>
        </section>

        <section id="bulanan" className="mt-9 flex flex-col bg-white shadow-md">
          <div className="mx-9 my-10">
            <div className="flex flex-row justify-between">
              <div className="flex flex-col gap-2">
                <h3 className="text-2xl font-bold">
                  Produksi Energi{" "}
                  <span className="text-[#9747FF]">Bulanan</span>
                </h3>
                {/* {monthlyData.isSuccess && (
                  <p className="italic text-sm ">
                    Last updated :{" "}
                    {format(
                      new Date(
                        monthlyData.data[monthlyData.data.length - 1].tanggal
                      ),
                      "dd/MM/yyyy"
                    )}{" "}
                  </p>
                )} */}
                {realData.isSuccess && (
                  <p className="italic text-sm">
                    Last updated :{" "}
                    {format(
                      new Date(realData.data[4]?.db_created_at),
                      "dd/MM/yyyy"
                    )}
                  </p>
                )}
              </div>
              <DatePicker
                label="Masukkan Bulan"
                value={monthlyDate}
                defaultValue={new Date()}
                onChange={changeDate.monthly}
                disableFuture
                openTo="month"
                views={["month", "year"]}
                className="mr-16"
              />
            </div>
            <div className="mt-9 ml-16">
              {monthlyData.isSuccess ? (
                <EnergyMonthlyChart data={monthlyData.data as MonthlyData[]} />
              ) : (
                <Skeleton variant="rectangular" width={1100} height={435} />
              )}
            </div>
          </div>
        </section>

        <section id="tahunan" className="mt-9 flex flex-col bg-white shadow-md">
          <div className="mx-9 my-10">
            <div className="flex flex-row justify-between">
              <div className="flex flex-col gap-2">
                <h3 className="text-2xl font-bold">
                  Produksi Energi{" "}
                  <span className="text-[#9747FF]">Tahunan</span>
                </h3>
                {/* {monthlyData.isSuccess && (
                  <p className="italic text-sm ">
                    Last updated :{" "}
                    {format(
                      new Date(
                        monthlyData.data[monthlyData.data.length - 1].tanggal
                      ),
                      "dd/MM/yyyy"
                    )}{" "}
                  </p>
                )} */}
                {realData.isSuccess && (
                  <p className="italic text-sm">
                    Last updated :{" "}
                    {format(
                      new Date(realData.data[4]?.db_created_at),
                      "dd/MM/yyyy"
                    )}
                  </p>
                )}
              </div>
              <DatePicker
                label="Masukkan Tahun"
                value={yearlyDate}
                defaultValue={new Date()}
                onChange={changeDate.yearly}
                disableFuture
                openTo="year"
                views={["year"]}
                className="mr-16"
              />
            </div>
            <div className="mt-9 ml-16">
              {yearlyData.isSuccess ? (
                <EnergyYearlyChart data={yearlyData.data as YearlyData[]} />
              ) : (
                <Skeleton variant="rectangular" width={1100} height={435} />
              )}
            </div>
          </div>
        </section>

        {/* <Skeleton variant="rounded" height={160} className="mt-4 " />
        <Skeleton variant="rounded" height={160} className="mt-4 " /> */}
      </div>
    </>
  );
}
