import Head from "next/head";
import { useState, useCallback } from "react";
import { format } from "date-fns";

import { DownloadButton } from "../../../components/button";
import { DownloadModal } from "@/components/modal";

import { ErrorSnackbar } from "@/components/snackbars";
import { useErrorSnackbar } from "@/hooks/snackbars.hooks";

import { Skeleton } from "@mui/material";
import MenuItem from "@mui/material/MenuItem";
import Select from "@mui/material/Select";
import { DatePicker } from "@mui/x-date-pickers";

import { EnergyOverviewCard } from "@/components/cards";
import {
  PowerDailyChart,
  EnergyDailyChart,
  EnergyMonthlyChart,
  EnergyYearlyChart,
} from "@/components/charts";
import { DailyData, MonthlyData, YearlyData } from "@/types/types";

import { useSolarFetch } from "@/hooks/solar.hooks";

import axios from "axios";
import { useQuery, useQueryClient } from "@tanstack/react-query";
import { SERVER_EBT_URL } from "@/configs/url";
import harian from "@/dummies/surya/ac/harian.json";

// import { realTimeCardItems } from "@/utils";

export default function PanelSuryaAC() {
  const { snackbarOpen, snackbarHandler } = useErrorSnackbar();

  const [open, setOpen] = useState(false);
  const openModal = useCallback(() => setOpen(true), []);
  const closeModal = useCallback(() => setOpen(false), []);

  // const [powerDate, setPowerDate] = useState<Date | null>(new Date());
  const [dailyDate, setDailyDate] = useState<Date | null>(new Date());
  const [monthlyDate, setMonthlyDate] = useState<Date | null>(new Date());
  const [yearlyDate, setYearlyDate] = useState<Date | null>(new Date());

  const [selectedParameter, setSelectedParameter] = useState<string>("energi");

  const changeDate = {
    // power: useCallback((date: Date | null) => setPowerDate(date), []),
    daily: useCallback((date: Date | null) => setDailyDate(date), []),
    monthly: useCallback((date: Date | null) => setMonthlyDate(date), []),
    yearly: useCallback((date: Date | null) => setYearlyDate(date), []),
  };

  // const dailyPower = useQuery({
  //   queryKey: [
  //     "dailyData",
  //     { data: "suryaAC", waktu: format(powerDate as Date, "yyyy-MM-dd") },
  //   ],
  //   queryFn: async () => {
  //     const res = await axios.get(
  //       `${SERVER_EBT_URL}/ebt/harian?data=suryaAC&waktu=${format(
  //         powerDate as Date,
  //         "yyyy-MM-dd"
  //       )}`
  //     );
  //     return res.data.value as DailyData[];
  //   },
  //   placeholderData: harian.value,
  //   onError: () => snackbarHandler.open(),
  //   // staleTime: 1000 * 60 * 3,
  // });

  // const outdoorSolarData = useQuery({
  //   queryKey: [
  //     "outdoorSolarData",
  //     { tanggal: format(powerDate as Date, "yyyy-MM-dd") },
  //   ],
  //   queryFn: async () => {
  //     const res = await axios.get(
  //       `/api/solar?tanggal=${format(powerDate as Date, "yyyy-MM-dd")}`
  //     );

  //     return res.data as OutdoorSolarData[];
  //   },
  // });

  const [realData, dailyData, monthlyData, yearlyData] = useSolarFetch(
    "suryaAC",
    dailyDate,
    monthlyDate,
    yearlyDate
  );

  const queryClient = useQueryClient();

  const todayEnergy = queryClient.getQueryData<MonthlyData[]>([
    "monthlyData",
    {
      data: "suryaAC",
      bulan: new Date().getMonth() + 1,
      tahun: new Date().getFullYear(),
    },
  ]);

  const thisMonthEnergy = queryClient.getQueryData<YearlyData[]>([
    "yearlyData",
    {
      data: "suryaAC",
      tahun: new Date().getFullYear(),
    },
  ]);

  return (
    <>
      <Head>
        <title>Panel Surya</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/Solar-Panel.svg" />
      </Head>

      <ErrorSnackbar toastOpen={snackbarOpen} toastHandler={snackbarHandler} />

      <div className="pb-8">
        <DownloadButton onClick={openModal} />

        <DownloadModal
          modalTitle="Panel Surya AC"
          open={open}
          onClose={closeModal}
        />

        {/* <section
          id="realtime"
          className="mt-4 flex flex-col bg-white shadow-md"
        >
          <div className="mx-9 my-10">
            <div className="flex flex-col gap-2">
              <h3 className="text-2xl font-bold">
                Data <span className="text-[#9747FF]">Terbaru</span>
              </h3>
              {realData.isSuccess ? (
                <p className="italic text-sm">
                  Last updated :{" "}
                  {format(
                    new Date(realData.data[4]?.db_created_at),
                    "dd/MM/yyyy HH:mm:ss"
                  )}{" "}
                  WIB
                </p>
              ) : (
                <></>
              )}
            </div>
            <div className="mt-9 flex flex-row gap-6 justify-center">
              {realData.isError && (
                <>
                  <Skeleton variant="rectangular" width={208} height={288} />
                  <Skeleton variant="rectangular" width={208} height={288} />
                  <Skeleton variant="rectangular" width={208} height={288} />
                  <Skeleton variant="rectangular" width={208} height={288} />
                  <Skeleton variant="rectangular" width={208} height={288} />
                </>
              )}

              {realData.isSuccess && (
                <>
                
                  <RealTimeCard
                    value={realData.data[4]?.voltage}
                    unit="Volt"
                    title="Tegangan"
                  />
                  <RealTimeCard
                    value={realData.data[4]?.current}
                    unit="Ampere"
                    title="Arus"
                  />
                  <RealTimeCard
                    value={realData.data[4]?.power}
                    unit="Watt"
                    title="Daya"
                  />
                </>
              )}
            </div>
          </div>
        </section> */}

        <div className="grid grid-cols-6 grid-rows-2 grid-flow-col gap-4 pt-2">
          <section
            id="daya-jam"
            className="col-span-5 row-span-2 flex flex-col bg-white shadow-md rounded-3xl "
          >
            <div className="mx-9 mt-6 mb-2">
              <div className="flex flex-row justify-between">
                <div className="flex flex-col gap-1">
                  <div className="text-2xl font-bold flex flex-row gap-2 items-center">
                    <p>Produksi Daya</p>
                    {/* <Select
                      value={selectedParameter}
                      size="small"
                      sx={{ fontWeight: 700, fontSize: "1.3rem" }}
                      onChange={(e) => setSelectedParameter(e.target.value)}
                      variant="standard"
                    >
                      <MenuItem value="energi">Energi</MenuItem>
                      <MenuItem value="daya">Daya</MenuItem>
                    </Select> */}
                    <p className="text-[#9747FF]">24 Jam</p>
                  </div>

                  {realData.isSuccess && (
                    <p className="italic text-sm ">
                      Last updated :{" "}
                      {format(
                        new Date(realData.data[4]?.db_created_at),
                        "dd/MM/yyyy HH:mm:ss"
                      )}{" "}
                      WIB
                    </p>
                  )}
                </div>
                <DatePicker
                  label="Masukkan Tanggal"
                  value={dailyDate}
                  views={["year", "month", "day"]}
                  defaultValue={new Date()}
                  onChange={changeDate.daily}
                  disableFuture
                  format="dd/MM/yyyy"
                />
              </div>
              <div className="mt-3">
                {dailyData.isSuccess ? (
                  <PowerDailyChart data={dailyData.data as DailyData[]} />
                ) : (
                  // selectedParameter == "daya" ? (
                  //   <PowerDailyChart data={dailyData.data as DailyData[]} />
                  // ) : (
                  //   <EnergyDailyChart data={dailyData.data as DailyData[]} />
                  // )
                  <Skeleton variant="rectangular" width={"100%"} height={435} />
                )}
              </div>
            </div>
          </section>

          <EnergyOverviewCard
            title="Hari Ini"
            value={
              todayEnergy != undefined
                ? todayEnergy[todayEnergy?.length - 1]?.value
                    .sum_harian_energi / 1000
                : 0
            }
          />
          <EnergyOverviewCard
            title="Bulan Ini"
            value={
              thisMonthEnergy != undefined
                ? (thisMonthEnergy[thisMonthEnergy.length - 1].value
                    .sum_bulanan_energi as number) / 1000 ?? 0
                : 0
            }
          />
        </div>

        {/* <section
          id="energi-jam"
          className="mt-9 flex flex-col bg-white  shadow-md rounded-3xl "
        >
          <div className="mx-9 my-10">
            <div className="flex flex-row justify-between">
              <div className="flex flex-col gap-2">
                <h3 className="text-2xl font-bold">
                  Produksi Energi <span className="text-[#9747FF]">24 Jam</span>
                </h3>
                
                {realData.isSuccess && (
                  <p className="italic text-sm">
                    Last updated :{" "}
                    {format(
                      new Date(realData.data[4]?.db_created_at),
                      "dd/MM/yyyy HH:mm:ss"
                    )}{" "}
                    WIB
                  </p>
                )}
                
              </div>
              <DatePicker
                label="Masukkan Tanggal"
                value={dailyDate}
                views={["year", "month", "day"]}
                defaultValue={new Date()}
                onChange={changeDate.daily}
                disableFuture
                format="dd/MM/yyyy"
                className="mr-16"
              />
            </div>
            <div className="mt-9 ml-16 mr-2">
              {dailyData.isSuccess || outdoorSolarData.isSuccess ? (
                <EnergyDailyChart data={dailyData.data as DailyData[]} />
              ) : (
                <Skeleton variant="rectangular" width={1100} height={435} />
              )}
            </div>
          </div>
        </section> */}

        <section
          id="harian"
          className="mt-9 flex flex-col bg-white  shadow-md rounded-3xl"
        >
          <div className="mx-9 my-10">
            <div className="flex flex-row justify-between">
              <div className="flex flex-col gap-2">
                <h3 className="text-2xl font-bold">
                  Produksi Energi <span className="text-[#9747FF]">Harian</span>
                </h3>
                {/* {monthlyData.isSuccess && (
                  <p className="italic text-sm ">
                    Last updated :{" "}
                    {format(
                      new Date(
                        monthlyData.data[monthlyData.data.length - 1].tanggal
                      ),
                      "dd/MM/yyyy"
                    )}{" "}
                  </p>
                )} */}
                {realData.isSuccess && (
                  <p className="italic text-sm">
                    Last updated :{" "}
                    {format(
                      new Date(realData.data[4]?.db_created_at),
                      "dd/MM/yyyy"
                    )}
                  </p>
                )}
              </div>
              <DatePicker
                label="Masukkan Bulan"
                value={monthlyDate}
                defaultValue={new Date()}
                onChange={changeDate.monthly}
                disableFuture
                openTo="month"
                views={["month", "year"]}
                // className="mr-16"
              />
            </div>
            <div className="mt-9 ">
              {monthlyData.isSuccess ? (
                <EnergyMonthlyChart data={monthlyData.data as MonthlyData[]} />
              ) : (
                <Skeleton variant="rectangular" width={"100%"} height={435} />
              )}
            </div>
          </div>
        </section>

        <section
          id="bulanan"
          className="mt-9 flex flex-col bg-white  shadow-md rounded-3xl"
        >
          <div className="mx-9 my-10">
            <div className="flex flex-row justify-between">
              <div className="flex flex-col gap-2">
                <h3 className="text-2xl font-bold">
                  Produksi Energi{" "}
                  <span className="text-[#9747FF]">Bulanan</span>
                </h3>
                {/* {monthlyData.isSuccess && (
                  <p className="italic text-sm ">
                    Last updated :{" "}
                    {format(
                      new Date(
                        monthlyData.data[monthlyData.data.length - 1].tanggal
                      ),
                      "dd/MM/yyyy"
                    )}{" "}
                  </p>
                )} */}
                {realData.isSuccess && (
                  <p className="italic text-sm">
                    Last updated :{" "}
                    {format(
                      new Date(realData.data[4]?.db_created_at),
                      "dd/MM/yyyy"
                    )}
                  </p>
                )}
              </div>
              <DatePicker
                label="Masukkan Tahun"
                value={yearlyDate}
                defaultValue={new Date()}
                onChange={changeDate.yearly}
                disableFuture
                openTo="year"
                views={["year"]}
                // className="mr-16"
              />
            </div>
            <div className="mt-9 ">
              {yearlyData.isSuccess ? (
                <EnergyYearlyChart data={yearlyData.data as YearlyData[]} />
              ) : (
                <Skeleton variant="rectangular" width={"100%"} height={435} />
              )}
            </div>
          </div>
        </section>

        {/* <Skeleton variant="rounded" height={160} className="mt-4 " />
        <Skeleton variant="rounded" height={160} className="mt-4 " /> */}
      </div>
    </>
  );
}
