import Head from "next/head";
import { useState } from "react";
import { format, getMonth, getYear } from "date-fns";
import { DownloadButton } from "../../../components/button";
import { DownloadModal } from "@/components/modal";

import { Skeleton } from "@mui/material";
import { DatePicker } from "@mui/x-date-pickers";

import { RealTimeCard } from "@/components/cards";
import { RealData, DailyData } from "@/types/types";

import { useQueries, useQuery } from "@tanstack/react-query";
import axios from "axios";

export default function PanelSuryaAC() {
  const [open, setOpen] = useState(false);

  const [dailyDate, setDailyDate] = useState<Date | null>(new Date());
  const [monthlyDate, setMonthlyDate] = useState<Date | null>(new Date());

  // const realData = useQuery<RealData>({
  //   queryKey: ["realData", { data: "suryaAC" }],
  //   queryFn: async () => {
  //     const res = await axios.get("http://10.46.10.128:5000/ebt?data=suryaAC");
  //     return res.data.value[4];
  //   },
  // });

  const [realData, dailyData, monthlyData] = useQueries({
    queries: [
      {
        queryKey: ["realData", { data: "suryaAC" }],
        queryFn: async () => {
          const res = await axios.get(
            "http://10.46.10.128:5000/ebt?data=suryaAC"
          );
          return res.data.value[4] as RealData;
        },
      },
      {
        queryKey: [
          "dailyData",
          { data: "suryaAC", waktu: format(dailyDate as Date, "yyyy-MM-dd") },
        ],
        queryFn: async () => {
          const res = await axios.get(
            `http://10.46.10.128:5000/ebt/harian?data=suryaAC&waktu=${format(
              dailyDate as Date,
              "yyyy-MM-dd"
            )}`
          );
          return res.data.value as DailyData[];
        },
      },
      {
        queryKey: [
          "dailyData",
          {
            data: "suryaAC",
            bulan: getMonth(monthlyDate as Date) + 1,
            tahun: getYear(monthlyDate as Date),
          },
        ],
        queryFn: async () => {
          const res = await axios.get(
            `http://10.46.10.128:5000/ebt/akumulasi/harian/suryaAC?bulan=${
              getMonth(monthlyDate as Date) + 1
            }&tahun=${getYear(monthlyDate as Date)}`
          );
          return res.data.value;
        },
      },
    ],
  });

  // console.log(monthlyDate);

  // console.log(dailyData.data);
  // const dateArray = [];
  // dailyData.data?.map((data) => {
  //   dateArray.push(data.db_created_at);
  // });
  // console.log(dateArray);

  // console.log(getMonth(monthlyDate as Date));

  return (
    <>
      <Head>
        <title>Panel Surya</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/Solar-Panel.svg" />
      </Head>

      <div className="pb-8">
        <DownloadButton onClick={() => setOpen(true)} />
        <DownloadModal
          modalTitle="Panel Surya AC"
          open={open}
          onClose={() => setOpen(false)}
        />

        <section
          id="realtime"
          className="mt-4 flex flex-col bg-white shadow-md"
        >
          <div className="mx-9 my-10">
            <div className="flex flex-row justify-between">
              <h3 className="text-2xl font-bold">
                <span className="text-[#9747FF]">Real Time</span> Monitoring
              </h3>
              {realData.isSuccess && (
                <p className="italic text-sm">
                  Last updated :{" "}
                  {format(
                    new Date(realData.data?.db_created_at),
                    "dd/MM/yyyy HH:mm:ss"
                  )}{" "}
                  WIB
                </p>
              )}
              {/* <p className="italic">Last updated : {}</p> */}
            </div>
            <div className="mt-9 flex flex-row gap-6 justify-center">
              {realData.isLoading && (
                <>
                  <Skeleton variant="rectangular" width={208} height={288} />
                  <Skeleton variant="rectangular" width={208} height={288} />
                  <Skeleton variant="rectangular" width={208} height={288} />
                  <Skeleton variant="rectangular" width={208} height={288} />
                  <Skeleton variant="rectangular" width={208} height={288} />
                </>
              )}
              {realData.isError && <p>Error...</p>}
              {realData.isSuccess && (
                <>
                  <RealTimeCard
                    value={realData.data?.voltage}
                    unit="Volt"
                    title="Tegangan"
                  />
                  <RealTimeCard
                    value={realData.data?.current}
                    unit="Ampere"
                    title="Arus"
                  />
                  <RealTimeCard
                    value={realData.data?.power}
                    unit="Watt"
                    title="Daya"
                  />
                  <RealTimeCard
                    value={realData.data?.energy}
                    unit="kWh"
                    title="Energi"
                  />
                  <RealTimeCard
                    value={realData.data?.power_factor}
                    unit="-"
                    title="Power Factor"
                  />
                </>
              )}
            </div>
          </div>
        </section>

        <section id="harian" className="mt-9 flex flex-col bg-white shadow-md">
          <div className="mx-9 my-10">
            <div className="flex flex-row justify-between">
              <h3 className="text-2xl font-bold">
                Produksi Energi <span className="text-[#9747FF]">Harian</span>
              </h3>
              <DatePicker
                label="Masukkan Tanggal"
                value={dailyDate}
                defaultValue={new Date()}
                onChange={(newValue) => setDailyDate(newValue)}
                disableFuture
                format="dd/MM/yyyy"
                className="mr-16"
              />
            </div>
            <div className="mt-9 ml-16">
              {dailyData.isSuccess ? (
                <EnergyDailyChart data={dailyData.data as DailyData[]} />
              ) : (
                <Skeleton variant="rectangular" width={1100} height={420} />
              )}
            </div>
          </div>
        </section>

        <section id="bulanan" className="mt-9 flex flex-col bg-white shadow-md">
          <div className="mx-9 my-10">
            <div className="flex flex-row justify-between">
              <h3 className="text-2xl font-bold">
                Produksi Energi <span className="text-[#9747FF]">Bulanan</span>
              </h3>
              <DatePicker
                label="Masukkan Bulan"
                value={monthlyDate}
                defaultValue={new Date()}
                onChange={(newValue) => setMonthlyDate(newValue)}
                disableFuture
                // format="dd/MM/yyyy"
                openTo="month"
                views={["month", "year"]}
                className="mr-16"
              />
            </div>
            <div className="mt-9 ml-16">
              {dailyData.isSuccess ? (
                <EnergyDailyChart data={dailyData.data as DailyData[]} />
              ) : (
                <Skeleton variant="rectangular" width={1100} height={420} />
              )}
            </div>
          </div>
        </section>

        <Skeleton variant="rounded" height={160} className="mt-4 " />
        <Skeleton variant="rounded" height={160} className="mt-4 " />
      </div>
    </>
  );
}

import dynamic from "next/dynamic";
const ApexChart = dynamic(() => import("react-apexcharts"), { ssr: false });

function EnergyDailyChart({ data }: { data: DailyData[] }) {
  // const y0Data = [10, 20, 30, 40, 50];
  const y1Data = [20, 40, 60, 80, 90];
  // const timestamps = [
  //   "2018-09-19T00:00:00.000Z",
  //   "2018-09-19T01:30:00.000Z",
  //   "2018-09-19T02:30:00.000Z",
  //   "2018-09-19T03:30:00.000Z",
  //   "2018-09-19T04:30:00.000Z",
  // ];
  const y0Data: number[] = [];
  const timestamps: string[] = [];

  data.map((data) => {
    y0Data.push(data.value.energy);
    timestamps.push(data.db_created_at);
    // change the timestamp timezone to GMT+7 and push it to timestamps array without date-fns with format yyyy-MM-dd HH:mm:ss
    // timestamps.push(
    //   utcToZonedTime(data.db_created_at, "Asia/Jakarta").toString()
    // format(
    //   utcToZonedTime(data.db_created_at, "Asia/Jakarta"),
    //   "yyyy-MM-dd HH:mm:ss"
    // )
    // );
  });

  // console.log(timestamps);

  const series = [
    {
      name: "Energi",
      data: y0Data,
    },
    { name: "Solar Irradiance", data: y1Data, yAxisIndex: 1 },
  ];

  const maxDataValue = Math.max(Math.max(...y1Data), Math.max(...y0Data));

  const options = {
    chart: {
      stacked: false,
      zoom: {
        type: "x",
        enabled: true,
        autoScaleYaxis: true,
      },
      toolbar: {
        autoSelected: "zoom",
      },
    },
    dataLabels: {
      enabled: false,
    },
    markers: {
      size: 0,
    },

    yaxis: [
      {
        title: {
          text: "Energi (kWh)",
        },
        max: maxDataValue,
      },
      {
        opposite: true,
        title: {
          text: "Solar Irradiance (W/m^2)",
        },
        max: maxDataValue,
      },
    ],
    xaxis: {
      type: "datetime",
      categories: timestamps,
      labels: {
        format: "HH:mm:ss",
        datetimeUTC: false,
      },
      // labels: {
      //   formatter: (value, timestamp) => {
      //     let localTime = addHours(new Date(timestamp), 0);
      //     return format(localTime, "dd/MM/yy HH:mm:ss");
      //   },
      // },
      // min: new Date("2018-09-19T00:00:00.000Z").getTime(),
      // max: new Date("2018-09-19T23:59:00.000Z").getTime(),
    },
    tooltip: {
      shared: true,
      x: {
        format: "dd/MM/yy HH:mm",
      },
    },
    stroke: {
      width: 2,
    },
  };

  return (
    <>
      <ApexChart
        options={options}
        series={series}
        type="area"
        width={1100}
        height={420}
      />
    </>
  );
}
